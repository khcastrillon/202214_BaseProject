{
	"info": {
		"_postman_id": "49c94fd0-a304-43f4-8808-70373d841827",
		"name": "Cities-Supermarkets",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "6572947"
	},
	"item": [
		{
			"name": "Add a city",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = pm.response.json()\r",
							"pm.globals.set(\"city_id\", data.id);\r",
							"\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"   pm.response.to.have.status(201);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"nombre\": \"Buenos aires\",\r\n    \"pais\": \"Argentina\",\r\n    \"numHabitantes\": 50000\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/cities",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"cities"
					]
				},
				"description": "This request creates a new owner. The API returns the created resource with the assigned ID."
			},
			"response": []
		},
		{
			"name": "Add a supermarket 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = pm.response.json()\r",
							"pm.globals.set(\"supermarket_id_1\", data.id);\r",
							"\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"   pm.response.to.have.status(201);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"nombre\": \"Nombre Supermercado 1\",\r\n    \"latitud\": \"123.12848\",\r\n    \"longitud\": \"-123.326\",\r\n    \"web\": \"nombreSupermercado.com\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/supermarkets",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"supermarkets"
					]
				},
				"description": "This request creates a new owner. The API returns the created resource with the assigned ID."
			},
			"response": []
		},
		{
			"name": "Add a supermarket 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = pm.response.json()\r",
							"pm.globals.set(\"supermarket_id_2\", data.id);\r",
							"\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"   pm.response.to.have.status(201);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"nombre\": \"Nombre Supermercado 2\",\r\n    \"latitud\": \"123.12848\",\r\n    \"longitud\": \"-123.326\",\r\n    \"web\": \"nombreSupermercado.com\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/supermarkets",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"supermarkets"
					]
				},
				"description": "This request creates a new owner. The API returns the created resource with the assigned ID."
			},
			"response": []
		},
		{
			"name": "Add a supermarket to a city",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"   pm.response.to.have.status(201);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/cities/{{city_id}}/supermarkets/{{supermarket_id_1}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"cities",
						"{{city_id}}",
						"supermarkets",
						"{{supermarket_id_1}}"
					]
				},
				"description": "This request creates a new owner. The API returns the created resource with the assigned ID."
			},
			"response": []
		},
		{
			"name": "Add an invalid supermarket to a city",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"   pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Get expected error message\", function () {\r",
							"   var data = pm.response.json();\r",
							"   pm.expect(data.message).to.eql(\"The supermercado with the given id was not found\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/cities/{{city_id}}/supermarkets/00000000-0000-0000-0000-000000000000",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"cities",
						"{{city_id}}",
						"supermarkets",
						"00000000-0000-0000-0000-000000000000"
					]
				},
				"description": "This request creates a new owner. The API returns the created resource with the assigned ID."
			},
			"response": []
		},
		{
			"name": "Get all supermarkets of a city",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Number of cities > ' + 0, function () {\r",
							"   var data = pm.response.json()\r",
							"   pm.expect(data.length).to.greaterThan(0)\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"   pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/cities/{{city_id}}/supermarkets",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"cities",
						"{{city_id}}",
						"supermarkets"
					]
				},
				"description": "This request returns all the owners."
			},
			"response": []
		},
		{
			"name": "Get a supermarket of a city",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"   pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/cities/{{city_id}}/supermarkets/{{supermarket_id_1}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"cities",
						"{{city_id}}",
						"supermarkets",
						"{{supermarket_id_1}}"
					]
				},
				"description": "This request returns the owner whit the indicated ID."
			},
			"response": []
		},
		{
			"name": "Get an invalid supermarket of a city",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 412\", function () {\r",
							"   pm.response.to.have.status(412);\r",
							"});\r",
							"\r",
							"pm.test(\"Get expected error message\", function () {\r",
							"   var data = pm.response.json();\r",
							"   pm.expect(data.message).to.eql(\"The supermercado with the given id is not associated to the ciudad\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/cities/{{city_id}}/supermarkets/{{supermarket_id_2}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"cities",
						"{{city_id}}",
						"supermarkets",
						"{{supermarket_id_2}}"
					]
				},
				"description": "This request reports an error that occurs when generating a request on a resource that does not exist."
			},
			"response": []
		},
		{
			"name": "Update supermarkets of a city",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"   pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "[\r\n   {\r\n       \"id\": \"{{supermarket_id_2}}\"\r\n   }\r\n]",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/cities/{{city_id}}/supermarkets",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"cities",
						"{{city_id}}",
						"supermarkets"
					]
				},
				"description": "This request updates an an existing owner. The API returns the updated resource with the changes."
			},
			"response": []
		},
		{
			"name": "Update invalid supermarkets of a city",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"   pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Get expected error message\", function () {\r",
							"   var data = pm.response.json();\r",
							"   pm.expect(data.message).to.eql(\"The supermercado with the given id was not found\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "[\r\n   {\r\n       \"id\": \"00000000-0000-0000-0000-000000000000\"\r\n   }\r\n]",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/cities/{{city_id}}/supermarkets",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"cities",
						"{{city_id}}",
						"supermarkets"
					]
				},
				"description": "This request reports an error that occurs when generating a request on a resource that does not exist."
			},
			"response": []
		},
		{
			"name": "Delete an supermarket of a city",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {\r",
							"   pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/cities/{{city_id}}/supermarkets/{{supermarket_id_2}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"cities",
						"{{city_id}}",
						"supermarkets",
						"{{supermarket_id_2}}"
					]
				},
				"description": "This request deletes an an existing owner."
			},
			"response": []
		},
		{
			"name": "Delete an supermarket non-associated to a city",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 412\", function () {\r",
							"   pm.response.to.have.status(412);\r",
							"});\r",
							"\r",
							"pm.test(\"Get expected error message\", function () {\r",
							"   var data = pm.response.json();\r",
							"   pm.expect(data.message).to.eql(\"The supermercado with the given id is not associated to the ciudad\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/cities/{{city_id}}/supermarkets/{{supermarket_id_1}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"cities",
						"{{city_id}}",
						"supermarkets",
						"{{supermarket_id_1}}"
					]
				},
				"description": "This request reports an error that occurs when generating a request on a resource that does not exist."
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:3000/api/v1",
			"type": "string"
		}
	]
}